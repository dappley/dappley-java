apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'
// binary plugins
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def RELEASE_GROUP_ID = "com.dappley"
def RELEASE_ARTIFACT_ID = "android-sdk"
def RELEASE_VERSION = "0.1"
def SITE_URL = "https://github.com/dappley/dappley-java"

project.version = RELEASE_VERSION
project.group=RELEASE_GROUP_ID

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}
android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // set multiDexEnabled true
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    api 'com.dappley:java-core:3.0.1'
    api 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.tencent:mmkv:1.0.23'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    configurations {
        all*.exclude group: 'org.slf4j'
        all*.exclude module: 'slf4j-api'
        all*.exclude group: 'ch.qos.logback'
        all*.exclude module: 'logback-classic'
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'dappley-android-sdk'
                groupId RELEASE_GROUP_ID
                artifactId RELEASE_ARTIFACT_ID
                version RELEASE_VERSION
                url SITE_URL
                licenses {
                    license {
                        name 'GNU Lesser General Public License v3.0'
                        url 'http://www.gnu.org/licenses/lgpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id 'Dappley'
                        name 'Dappley'
                    }
                }
                scm {
                    connection SITE_URL
                    developerConnection SITE_URL
                    url SITE_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = readPropertyFromLocalProperties("bintray.user")
    key = readPropertyFromLocalProperties("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "dappley-java"
        name = "dappley-android-sdk"
        websiteUrl = SITE_URL
        vcsUrl = SITE_URL
        licenses = ["LGPL-3.0"]
        publish = true
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/8/docs/api"
    }
}

def readPropertyFromLocalProperties(String key) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception e) {
        println("load local properties failed msg:${e.message}")
    }
    return properties.getProperty(key)
}